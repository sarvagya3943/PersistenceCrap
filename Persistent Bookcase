/*
ye mera template hai
apna khud likho bc :P
*/

/*
Author : Sarvagya Agarwal
*/

#include<bits/stdc++.h>
using namespace std;

//defines
#define openin freopen("input.txt","r",stdin)
#define openout freopen("output.txt","w",stdout)
#define fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ll long long
#define int long long
#define mod 1000000007
#define rep(i,a,n) for(__typeof(n) i=a;i<=n;++i)
#define all(c) (c).begin(),(c).end()
#define ff first
#define ss second
#define pb push_back
#define mp make_pair

int power(int a , int b)
{
    int res = 1 ;
    while(b)
    {
        if(b%2) {
            res = (res * a)%mod ;
        }
        b/=2 ;
        a = (a*a)%mod ;
    }
    return res ;
}

//debug
#define TRACE

#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1){
		cerr << name << " : " << arg1 << std::endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args){
		const char* comma = strchr(names + 1, ',');cerr.write(names, comma - names) << " : " << arg1<<" | ";__f(comma+1, args...);
}
#else
#define trace(...)
#endif

struct node {
    node *left ; // pointer to the left node
    node *right ; // pointer to the right node
    int val ; // number of books in this range
    int lazy ; // you know what this is
    /* builds a node for range [start,end] */
    node *build(int start , int endd)
    {
        val = lazy = 0 ;
        if(start != endd)
        {
            int mid = (start + endd) / 2 ;
            left = new node ;
            right = new node ;
            left = left->build(start,mid) ;
            right = right->build(mid+1,endd) ;
        }
        return this ;
    }
    /* returns number of books in this range */
    int get(int start,int endd)
    {
        int sz = endd-start+1 ;
        if(lazy)
            return sz-val ; // obvious
        else return val ;
    }
    /* point update */
    node *update1(int start,int endd,int x,int v,int lz)
    {
        int mid = (start + endd ) / 2 ;
        lz ^= lazy ;
        node *f = new node ;
        f->val = val ;
        f->left = left ;
        f->right = right ;
        f->lazy = lazy ;
        if(start==endd) {
            //leaf
            if(lz==0) {
                f->val = v ; // lazy was 0
            }
            else {
                f->val = !v ; // lazy was 1
            }
            return f ;
        }
        else if(x <= mid) {
            f->left = left->update1(start,mid,x,v,lz) ;
        }
        else {
            f->right = right->update1(mid+1,endd,x,v,lz) ;
        }
        f->val = f->left->get(start,mid) ;
        f->val += f->right->get(mid+1,endd) ;
        return f;
    }
    /* Range update */
    node *update2(int start,int endd,int a,int b)
    {
        int mid = (start + endd) / 2 ;
        node *f = new node ;
        f->val = val ;
        f->left = left ;
        f->right = right ;
        f->lazy = lazy ;
        if(start >= a && endd <= b)
        {
            f->lazy ^= 1 ;
            return f ;
        }
        else if(start > b || endd < a)
        {
            return this ;
        }
        else
        {
            f->left = left->update2(start,mid,a,b) ;
            f->right = right->update2(mid+1,endd,a,b) ;
            f->val = f->left->get(start,mid) + f->right->get(mid+1,endd) ;
        }
        return f ;
    }
    int query(int start,int endd,int a,int b,int lz) {
        lz ^= lazy ;
        int mid = (start + endd) / 2 ;
        if(start >= a && endd <= b) {
            return get(start,endd) ;
        }
        else if(start > b || endd < a) {
            return 0;
        }
        else return left->query(start,mid,a,b,lz) + right->query(mid+1,endd,a,b,lz) ;
    }
};
node *root[1000005] ;
/* That moment when persistent segment tree works in the first try */
int32_t main()
{
    fast;
    //openin;
    int n,m,q ;
    cin >> n >> m >> q ;
    root[0] = new node ;
    root[0] = root[0]->build(1,n*m) ;
    rep(i,1,q)
    {
        int type ;
        cin >> type ;
        if(type==1) {
            int a,b ;
            cin >> a >> b ;
            root[i] = root[i-1]->update1(1,n*m,(a-1)*m+b,1,0) ;
        }
        else if(type==2) {
            int a,b ;
            cin >> a >> b ;
            root[i] = root[i-1]->update1(1,n*m,(a-1)*m+b,0,0) ;
        }
        else if(type==3) {
            int a ;
            cin >> a ;
            root[i] = root[i-1]->update2(1,n*m,(a-1)*m+1,a*m) ;
        }
        else {
            int k ;
            cin >> k ;
            root[i] = root[k] ;
        }
        cout << root[i]->query(1,n*m,1,n*m,0) << '\n' ;
    }
    return 0;
}
